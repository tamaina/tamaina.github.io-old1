//- javascript
-
  const page = pages[page_index_numer]
  const pug_api = require("pug")
  const htmlmin = require("html-minifier").minify
  const kramed = require("kramed")
  const hljs = require('highlight.js')
  let main_html

  function md_better(body){
    
    //- headingにpt-5を指定
    body = body.replace(/<h([2-6])(.*?)>/gi,"<h$1 class=\"pt-5\"$2>")

    //- https?のつくa要素に
    body = body.replace(/<a href=\"(https?:)\/\/(.*?)\">(.*?)<\/a>/gi,"<a href=\"$1\/\/$2\" target='_blank' rel='noopener'>$3<i class=\"fa fa-external-link fa-fw\" aria-hidden=\"true\"></i><\/a>")

    //- "/"から始まる画像srcはその前にsite.url.pathを付加、およびimg-fluid付加
    body = body.replace(/<img(.*?)src=\"\/(.*?)\"(.*?)>/gi,"<img$1src=\"" + site.url.path + "\/$2\"$3 class=\"img-fluid\">")

    body = body.replace(/<table>/gi, "<table class=\"table table-sm table-bordered\">")
    return body
  }

//- make main html
case page.meta.srcext
  when '.md'
    - main_html = htmlmin(md_better(kramed(page.body)),{"collapseWhitespace": true,"removeEmptyAttributes": true,"removeEmptyElements": true})
  when '.html'
  when '.htm'
    - main_html = htmlmin(page.body,{"collapseWhitespace": true,"removeEmptyAttributes": true,"removeEmptyElements": true})
  when '.pug'
    -
      let locals = {"site": site,"pages": pages,"page": page,"package": package,"option": option}
      let fn = pug_api.compile(page.body,{filters:require('./pugfilters.js')})
      main_html = fn(locals)

-
  function highl(htm){
    htm = htm.replace(/<pre><code class="(.*?)">([\s\S]*?)<\/code><\/pre>/gi, function(a, l, b){
      b = b.replace(/&amp;/g, "&")
            .replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">")
            .replace(/&#39;/g, "'")
            .replace(/&quot;/g, "\"")
      b = b.replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">")
            .replace(/&#39;/g, "'")
            .replace(/&quot;/g, "\"")
      if(l.indexOf("lang-") == 0) l = l.slice(5)
      try {
        const hled = hljs.highlight(l, b)
        return `<pre><code class="${l}">${hled.value}</code></pre>`
      } catch(e) {
        console.log("\nhighlight処理中にエラーが発生しました。\nおそらく、markdownで未知の言語が指定されている場合にこのメッセージが表示されているはずです。\nhighlightAuto APIを利用してやりなおします。\n以下にエラーの内容を示します。\n")
        console.log(e)
        console.log("\nエラーは以上です。既知のエラーであるため、処理を正常に続行します。\n")
        const hled = hljs.highlightAuto(b)
        return `<pre><code class="${hled.language}">${hled.value}</code></pre>`
      }
    } )
    htm = htm.replace(/<pre>\s*?<code>([\s\S]*?)<\/code>\s*?<\/pre>/gi, function(a, b){
      b = b.replace(/&amp;/g, "&")
            .replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">")
            .replace(/&#39;/g, "'")
            .replace(/&quot;/g, "\"")
      b = b.replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">")
            .replace(/&#39;/g, "'")
            .replace(/&quot;/g, "\"")
      const hled = hljs.highlightAuto(b)
      return `<pre><code class="${hled.language}">${hled.value}</code></pre>`
    } )
    return htm
  }
  main_html = highl(main_html)

-
  let heading_html, headings = []
  const reg_heading = /<h([1-6])(.*?)>([^]*?)<\/h(\1)>/gi
  while((heading_html = reg_heading.exec(main_html)) !== null){
    let heading = {},
        idmatch = []
    idmatch = heading_html[2].match(/id=(["'])(.*?)(\1)/)
    if(idmatch == null)
      heading.id = null
    else
      heading.id = idmatch[2]
    heading.html     = heading_html[0]
    heading.number   = heading_html[1]
    heading.attr     = heading_html[2]
    heading.text     = heading_html[3]
    headings.push(heading)
  }