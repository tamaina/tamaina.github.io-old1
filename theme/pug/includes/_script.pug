//- javascript
-
  const page = pages[page_index_numer]
  const pug_api = require("pug")
  const htmlmin = require("html-minifier").minify
  const kramed = require("kramed")
  const presummaly = require("summaly")
  const summaly = presummaly.default
  const jquery = require("jquery")
  const cheerio = require("cheerio")
  const hljs = require('highlight.js')
  const pug_o = {"site": site, "pages": pages, "page": page, "package": package, "option": option, filters: require('./pugfilters.js')}
  let main_html

  function pugit(val){
    return pug_api.render(val, pug_o)
  }

  function md_better(htm){
    let $ = cheerio.load(htm, {decodeEntities: false})
  
    $('h2').addClass('mt-5 p-1 border border-top-0 border-right-0 border-primary')
    $('h3, h4').addClass('mt-4 p-1 border border-left-0 border-top-0 border-right-0 border-primary')
    $('h5, h6').addClass('mt-3 p-1 border border-left-0 border-top-0 border-right-0 border-light')
    $('a[href^="http"], a[href^="//"]').attr({target:'_blank', rel:'noopener'})
    $('[target="_blank"]').append('<i class="fa fa-external-link fa-fw" aria-hidden="true"></i>')
    $('img[src^="/"]').attr( 'src', function(i, el){ return `${site.url.path}${$(this).attr('src')}` }).addClass('img-fluid')
    $('table').addClass('table table-sm table-bordered')
  
    return $.html()
  }

  function getTL(val){
    let result
    eval("result = `" + val + "`")
    return result
  }

//- make main html
case page.meta.srcext
  when '.md'
    - main_html = htmlmin(md_better(kramed(page.body)),{"collapseWhitespace": true,"removeEmptyAttributes": true,"removeEmptyElements": true})
  when '.html'
  when '.htm'
    - main_html = htmlmin(page.body,{"collapseWhitespace": true,"removeEmptyAttributes": true,"removeEmptyElements": true})
  when '.pug'
    -
      main_html = pugit(page.body)

-
  function highl(htm){
    htm = htm.replace(/<pre><code class="(.*?)">([\s\S]*?)<\/code><\/pre>/gi, function(a, l, b){
      b = b.replace(/&amp;/g, "&")
            .replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">")
            .replace(/&#39;/g, "'")
            .replace(/&quot;/g, "\"")
      b = b.replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">")
            .replace(/&#39;/g, "'")
            .replace(/&quot;/g, "\"")
      if(l.indexOf("lang-") == 0) l = l.slice(5)
      try {
        const hled = hljs.highlight(l, b)
        return `<pre><code class="${l}">${hled.value}</code></pre>`
      } catch(e) {
        console.log("\nhighlight処理中にエラーが発生しました。\nおそらく、markdownで未知の言語が指定されている場合にこのメッセージが表示されているはずです。\nhighlightAuto APIを利用してやりなおします。\n以下にエラーの内容を示します。\n")
        console.log(e)
        console.log("\nエラーは以上です。既知のエラーであるため、処理を正常に続行します。\n")
        const hled = hljs.highlightAuto(b)
        return `<pre><code class="hljs ${hled.language} border">${hled.value}</code></pre>`
      }
    } )
    htm = htm.replace(/<pre>\s*?<code>([\s\S]*?)<\/code>\s*?<\/pre>/gi, function(a, b){
      b = b.replace(/&amp;/g, "&")
            .replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">")
            .replace(/&#39;/g, "'")
            .replace(/&quot;/g, "\"")
      b = b.replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">")
            .replace(/&#39;/g, "'")
            .replace(/&quot;/g, "\"")
      const hled = hljs.highlightAuto(b)
      return `<pre><code class="hljs ${hled.language}">${hled.value}</code></pre>`
    } )
    return htm
  }
  main_html = highl(main_html)

  /*  どうしよう…
  function suly(htm){  // b4          p            url    af    lead
    htm = htm.replace(/<a(.*?)href=\"(https?:)?\/\/(.*?)\"(.*?)>(.*)<\/a>/gi, (b4, p, url, af, lead) => {
      const src = `${p}//${url}`
      let result = ""
      summaly(src).then(
        function(var){
          result = `<a${b4}href="${val.url}"${af} data-toggle="tooltip" title="<b>${val.title}</b><br><small>${val.url}<br><em>${description.slice(0,50)}<br><b>${val.sitename}</b></em></small>">${lead}<\/a>`
        },
        function(reason){
          result = `<a${b4}href="${val.url}"${af} data-toggle="tooltip"><span class="text-danger">${lead}</span><\/a>`
        }
      )
      return result
    })
  }
  main_html = suly(main_html)
  */

  let heading_html, headings = []
  const reg_heading = /<h([1-6])(.*?)>([^]*?)<\/h(\1)>/gi
  while((heading_html = reg_heading.exec(main_html)) !== null){
    let heading = {},
        idmatch = []
    idmatch = heading_html[2].match(/id=(["'])(.*?)(\1)/)
    if(idmatch == null)
      heading.id = null
    else
      heading.id = idmatch[2]
    heading.html     = heading_html[0]
    heading.number   = heading_html[1]
    heading.attr     = heading_html[2]
    heading.text     = heading_html[3]
    headings.push(heading)
  }